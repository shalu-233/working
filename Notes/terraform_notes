for azure need to pass subscription id and feature in provider


subscription id ===> u can export it on cli or set as environmental variable in local computer




***terraform init ===> 
initialize working directory containing terraform config files
initialize backend where we store state files
download and install necessary plugins

***terraform fmt ===> to format files to ensure consistency
If you want to format files in the current directory and all subdirectories, use the -recursive flag.

Command: terraform fmt -recursive



**terraform validate ===> used to check configuration files syantax is correct and are consistent before deployment

it checks syntax is consistent , ready for execution
best practice before running terraform plan or terraform apply
it won't checks if resources exist


***you can remove resource from being managed by terraform --> terraform state rm <resource_block>
**we can overwrite backup and state file path but its not recommended


*** we can import already existing infrastructure to be managed by terraform




**implicit dependancy ===> means resource in terraform uses attribute of other resource 

**explicit dependancy ===> means here adding meta argument 
depends_on []


** idempotenace

you will get same result (desired state) irrespective of number of times of execution --hence we called terraform execution is idempotent


**terraform console to validate expression we used in resource 

** count = is used to create almost identical objects in block

*** .tfvars = this variable file is used to provide variable values and command used to create infra 

terraform apply -var-file='<name>.tfvars'


***expression ===> using this we can take value from somewhere else , calculate or evalute it 
                   Result of expression is a value
                   All values have type  (string | number | bool | map | list | set)


***local ===> local value are assigned to expression so that we can use them multiple times instead of repeating expression 

***conditional expression ===> uses value of Boolean expression to select one of two values
eg -condition ? true_val : false_val


***state file ===> keeps track of current state of your infrastructure
it help to make decision
location - same from where you are running terraform
file name - terraform.tfstate


terraform execution: 
-> gets current state from provider
-> compare it with desire state, which becomes plan
-> execute the plan and store creation details in state files



**terraform workspace:

**terraform taint:





