**github - remote repository platform

**Git - Version control system
      tracks the changes made
      tracks who made changes
      coding collaboration


**What does Git do?
-Manage projects with Repositories
-Clone a project to work on a local copy
-Control and track changes with Staging and Committing
-Branch and Merge to allow for work on different parts and versions of a project
-Pull the latest version of the project to a local copy
-Push local updates to the main project

======================================================================================
flow :

git init -> git status -> git add (working to stage) -> git commit (save point) -> git merge (merge with master) -> git remote add origin <github-url> -> git push --set-upstream origin master

github flow:
create new branch -> make change and commit -> open pull request -> review -> deploy -> merge
========================================================================================
**Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!

**configure the user ---> it will let git know who you are and this info will be used by each git commit
$git config --global user.name "shalu-233"
$git config --global user.mail "bandarishalu48@gmail.com"

if we don't set then will face an issue

=============================================================================================
$ git commit -m "this is my first hello world in git"
Author identity unknown

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'Admin@DESKTOP-BGR0SAV.(none)')
=============================================================================================

**to set the user and email for current foler then remove global

**git init - to initialize git 
$ git init
Initialized empty Git repository in D:/my_Class/python_for_devops_class/my_own_learning_git/myproject/.git/
creates the .git folder	
it contains staging and local repo 


**git status :will give info 
-what is current branch 
-what are the commits happend
-what are the untracked files --new file added to working directory(no prior histroy)

**git branch - will give info of branches and * symbol means on which branch we are currently
git branch -a ===> this will show you list of all branches which are on github
git branch -r ==> for remote branch only

Tracked - git aware of and added to repo
untracked - files which are in our working dir and not added to repo


**staged files - the files on which we are working are ready to commit

**git add - to add a file in current directory to staging environment
git add --all - to add all files in current directory to staging 
git add -A ---also means to add all files


**commit - its kind of save point 
           if we want to change anything we can go back and fix it
           When we commit, we should always include a message
           The commit command performs a commit, and the -m "message" adds a message.
git commit -m "First release of Hello World!"

$ git commit -m "this is my first hello world code in git"
[master (root-commit) 0214742] this is my first hello world code in git
 3 files changed, 26 insertions(+)
 create mode 100644 README.md
 create mode 100644 bluestyle.css
 create mode 100644 index.html


commit without stage -  (not recommended coz sometimes it will commit unwanted files as well)
git commit -a -m "<msg>"


daemon on git :
usign this we can fetch and clone git repo over the network usign https and ssh 

below will remove the file from staged area and move to the working area:
git restore --staged <file path>


below will move you to previous state and HEAD will also .
but if file is untracked then below will not do any action on it
git reset --hard 


**to veiw history of logs 
git log


**git checkout - to switch from one branch to another
basically it is used to move HEAD around the commits

** Changes not staged for commit  ---> means You have to use git add to stage them, or they won't commit. Take it that it informs git which are the changes you want to commit.

** to delete branch 
git branch -d <branch_name>

**git remote add origin URL - specifies that you are adding a remote repository, with the specified URL, as an origin to your local Git repo.


**push our master branch to the origin url, and set it as the default remote branch:
git push --set-upstream origin master

Note: Since this is the first time you are connecting to GitHub, you will get some kind of notification you to authenticate this connection.

**fetch gets all the change history of a tracked branch/repo.
git fetch origin


**git diff <branch-name> - to check the difference


**git pull -- it will fetch and merge instead of going through all the steps like to check diff /logs/merge


**fork - its copy of repository 
         its not a command ,this is offered in Github and other repository hosts
         this is useful when we want to contribute to someone else's project or create our own based on thiers


**A clone is a full copy of a repository, including all logging and versions of files.

**.gitignore -specify which file should be ignored and not tracked 
 .git/info/exclude - It works the same way as .gitignore but are not shown to anyone else.


 **revert is the command we use when we want to take a previous commit and add it as a new commit, keeping the log intact.

 **reset is the command we use when we want to move the repository back to a previous commit, discarding any changes made after that commit.

 **amend - It combines changes in the staging environment with the latest commit, and creates a new commit.
 git commit --amend -m <msg>


Origin is a reference to a remote repository.
Master is a name for a branch within that repository.





++++++++

how i added notes to git repo:

git add .\Git_notes ----> add to staging area
git commit -m "Added Notes for Git"   --> its like a save point
git push origin master    ---> pushing into remote repo


